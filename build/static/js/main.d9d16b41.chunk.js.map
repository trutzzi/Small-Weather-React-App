{"version":3,"sources":["SimpleMap.js","Weather.js","App.js","index.js"],"names":["SimpleExample","props","fade","useSpring","from","opacity","coord","position","lat","lon","div","style","className","Map","center","zoom","width","height","onViewportChanged","view","TileLayer","attribution","url","Weather","weather","main","Fragment","name","description","temp","temp_max","temp_min","humidity","App","state","api","apiKey","load","title","city","lang","wheater","long","getWeather","bind","handleInput","fetchData","mod","request","this","fetch","response","json","cod","setState","alert","message","e","target","value","viewport","onChange","htmlFor","placeholder","type","id","min","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9d16b41.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer } from \"react-leaflet\"\nimport 'leaflet/dist/leaflet.css';\nimport {useSpring, animated} from \"react-spring\"\n\nfunction SimpleExample(props) {\n  const fade = useSpring({\n    from: {opacity: 0},\n    opacity: 1,\n  })\n  let { lat, lon } = props.coord\n  const position = [lat, lon];\n  return (\n    <animated.div style={fade} className=\"themap\">\n      <Map center={position} zoom={props.zoom} style={{ width: '100%', height: '100%' }}\n        onViewportChanged={(view) => props.view(view)}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n      </Map>\n      <p>Move the map to search weather by area</p>\n    </animated.div>\n  );\n}\n\n\nexport default SimpleExample","import React from 'react';\nimport SimpleExample from './SimpleMap'\nfunction Weather(props) {\n  let { weather, coord, main } = props.weather\n  return (\n    <React.Fragment>\n      <div className=\"grid details\">\n        <div className=\"grid__col grid__col--1-of-2 grid__col--xl-1-of-1 grid__col--m-1-of-1 detail1\">\n          <h3><span className=\"icon icon-location\"></span>{props.weather.name}</h3>\n          <p>Showing weather for {props.weather.name}</p>\n          <h4>{weather[0].main}</h4>\n          <p>{weather[0].description}</p>\n          <p>Coord: <br /> Lon {coord.lon} and Lat {coord.lat}</p>\n        </div>\n        <div className=\"grid__col grid__col--1-of-2 grid__col--xl-1-of-1 grid__col--m-1-of-1 detail2\">\n          <h3><span className=\"icon icon-temp\"></span>Temperatures</h3>\n          <p>Main {main.temp} <small className=\"celsius\">C</small></p>\n          <p>Max {main.temp_max} <small className=\"celsius\">C</small></p>\n          <p>Min {main.temp_min}<small className=\"celsius\">C</small> </p>\n          <p>Feels like {main.temp_min} <small className=\"celsius\">C</small> </p>\n          <p>Humidity {main.humidity}% </p>\n        </div>\n      </div>\n      <SimpleExample zoom={props.zoom} view={props.view} coord={coord} />\n    </React.Fragment>\n  );\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './Weather'\n// import Transitionlearn from './transitionlearn'\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            api: '//api.openweathermap.org/data/2.5/weather?q=',\n            apiKey: '0c3726306434398464920f4a294015b0',\n            load: false,\n            title: 'Weather App',\n            city: 'Bucharest',\n            lang: 'RO',\n            wheater: '',\n            long: '',\n            lat: '',\n            zoom: 19,\n        }\n        this.getWeather = this.getWeather.bind(this)\n        this.handleInput = this.handleInput.bind(this)\n        this.fetchData = this.fetchData.bind(this)\n        this.onViewportChanged = this.onViewportChanged.bind(this)\n    }\n    async fetchData(mod) {\n        let request\n        if (mod === 2) {\n            request = (this.state.api + '&appid=' + this.state.apiKey + '&lang=' + this.state.lang + '&lon=' + this.state.long + '&lat=' + this.state.lat + '&units=metric')\n        } else {\n            request = (this.state.api + this.state.city + '&appid=' + this.state.apiKey + '&lang=' + this.state.lang + '&units=metric')\n        }\n        const response = await fetch(request)\n        const json = await response.json();\n        if (json.cod === 200) {\n            this.setState({\n                weather: json,\n                load: true\n            })\n        } else {\n            alert(\"COD:\" + json.cod + '\\n' + json.message)\n        }\n    }\n    componentDidMount() {\n        this.fetchData(1);\n    }\n    getWeather() {\n        this.fetchData(1);\n    }\n    handleInput(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    onViewportChanged(viewport) {\n        let { center, zoom } = viewport\n        let [lat, long] = center\n        this.setState({\n            lat: lat,\n            long: long,\n            zoom: zoom\n        })\n        this.fetchData(2)\n    }\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"header\">\n                    <div className=\"container\">\n                        <h1>{this.state.title}</h1>\n                        <p>Powered by OpenWeather & T.Valentin</p>\n                        <select onChange={this.handleInput} name=\"lang\">\n                            <option value=\"RO\">Romana</option>\n                            <option value=\"EN\">English</option>\n                            <option value=\"RU\">Russian</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"body\">\n                    <div className=\"container\">\n                        <label htmlFor=\"city\">\n                        </label>\n                        <div className=\"wrapper\">\n                            <div className=\"grid\">\n                                <div className=\"grid__col grid__col--1-of-2 grid__col--xl-1-of-1 grid__col--m-1-of-1 bycoord\">\n                                    <h2>By coordonate</h2>\n                                    <label htmlFor=\"lat\"><input placeholder=\"lat\" type=\"number\" id=\"lat\" name=\"lat\" onChange={this.handleInput} min=\"1\" /></label>\n                                    <label htmlFor=\"long\"><input placeholder=\"long\" type=\"number\" id=\"long\" onChange={this.handleInput} name=\"long\" min=\"1\" /></label>\n                                    <button onClick={() => this.fetchData(2)}>Set</button>\n                                </div>\n                                <div className=\"grid__col grid__col--1-of-2 grid__col--xl-1-of-1 grid__col--m-1-of-1 byname\">\n                                    <h2>By city name</h2>\n                                    <input onChange={(e) => this.handleInput(e)} placeholder=\"City\" id=\"city\" name=\"city\" type=\"text\" />\n                                    <button onClick={this.getWeather}>Set</button>\n                                </div>\n                            </div>\n                        </div>\n                        {this.state.load ? <Weather view={this.onViewportChanged} zoom={this.state.zoom} weather={this.state.weather} city={this.state.city} /> : ''}\n                    </div>\n                </div>\n                <div className=\"footer\">\n                    <div className=\"container\">\n                        <h3>Weather App v1 © T.Valentin</h3>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(< App />, document.getElementById('root'));"],"sourceRoot":""}